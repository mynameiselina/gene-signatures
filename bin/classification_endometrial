#!/usr/bin/env python3
"""
load data
select the samples for the chosen comparison (e.g. all, only TP53wt, etc)

load selected genes for classification (e.g. from nexus express)

Run Classification:
linear_model.LogisticRegression
run n times: n = number of samples
each time run on n-1 samples and predict on 1 sample
do a binom_test on the predictions

figures: highlight the names from the first genes with the
highest absolute coefficients across all classification runs

plot:
-boxplot
-swarmplot
-heatmap of all selected genes
-heatmap of highlighted selected genes

# run for un-filtered data
classification_endometrial reportName='classification' output_directory='output,set_up_endometrial' input_fname='data_processed__select_all__uniq.txt' input_directory='output,set_up_endometrial,remove_dupl_genes' >> ./data/output/set_up_endometrial/classification__select_all.log
classification_endometrial reportName='classification' output_directory='output,set_up_endometrial' input_fname='data_processed__select_all_sortFOXA1__uniq.txt' input_directory='output,set_up_endometrial,remove_dupl_genes' select_samples_title='select_all_sortFOXA1' select_samples_sort_by='FOXA1_mut5,TP53_mut5' >> ./data/output/set_up_endometrial/classification__select_all_sortFOXA1.log
classification_endometrial reportName='classification' output_directory='output,set_up_endometrial' input_fname='data_processed__select_TP53wt__uniq.txt' input_directory='output,set_up_endometrial,remove_dupl_genes' select_samples_from='TP53_mut5' select_samples_which=0 select_samples_title='select_TP53wt' select_samples_sort_by='FOXA1_mut5' >> ./data/output/set_up_endometrial/classification__select_TP53wt.log
classification_endometrial reportName='classification' output_directory='output,set_up_endometrial' input_fname='data_processed__select_TP53mut__uniq.txt' input_directory='output,set_up_endometrial,remove_dupl_genes' select_samples_from='TP53_mut5' select_samples_which=1 select_samples_title='select_TP53mut' select_samples_sort_by='FOXA1_mut5' >> ./data/output/set_up_endometrial/classification__select_TP53mut.log

# run for filtered data
# classification_endometrial reportName='classification' output_directory='output,set_up_endometrial_FILT' selected_genes_directory='output,set_up_endometrial_FILT,nexus_express' gene_info_directory='output,set_up_endometrial_FILT' input_fname='data_processed__select_all__uniq.txt' input_directory='output,set_up_endometrial_FILT,remove_dupl_genes' >> ./data/output/set_up_endometrial_FILT/classification__select_all.log
# classification_endometrial reportName='classification' output_directory='output,set_up_endometrial_FILT' selected_genes_directory='output,set_up_endometrial_FILT,nexus_express' gene_info_directory='output,set_up_endometrial_FILT' input_fname='data_processed__select_all_sortFOXA1__uniq.txt' input_directory='output,set_up_endometrial_FILT,remove_dupl_genes' select_samples_title='select_all_sortFOXA1' select_samples_sort_by='FOXA1_mut5,TP53_mut5' >> ./data/output/set_up_endometrial_FILT/classification__select_all_sortFOXA1.log
# classification_endometrial reportName='classification' output_directory='output,set_up_endometrial_FILT' selected_genes_directory='output,set_up_endometrial_FILT,nexus_express' gene_info_directory='output,set_up_endometrial_FILT' input_fname='data_processed__select_TP53wt__uniq.txt' input_directory='output,set_up_endometrial_FILT,remove_dupl_genes' select_samples_from='TP53_mut5' select_samples_which=0 select_samples_title='select_TP53wt' select_samples_sort_by='FOXA1_mut5' >> ./data/output/set_up_endometrial_FILT/classification__select_TP53wt.log
classification_endometrial reportName='classification' output_directory='output,set_up_endometrial_FILT' selected_genes_directory='output,set_up_endometrial_FILT,nexus_express' gene_info_directory='output,set_up_endometrial_FILT' input_fname='data_processed__select_TP53mut__uniq.txt' input_directory='output,set_up_endometrial_FILT,remove_dupl_genes' select_samples_from='TP53_mut5' select_samples_which=1 select_samples_title='select_TP53mut' select_samples_sort_by='FOXA1_mut5' >> ./data/output/set_up_endometrial_FILT/classification__select_TP53mut.log

"""
from omics_processing.io import (
    set_directory
    )
from gene_signatures.core import (
    custom_div_cmap
)
from gene_signatures.classification import (
    classification
)
import os
import sys
import plac
import logging
import matplotlib
import matplotlib.pyplot as plt

script_path = os.path.dirname(__file__)
script_fname = os.path.basename(__file__).rsplit('.')[0]


plot_kwargs = {
    'cmap_custom': custom_div_cmap(9),
    'vmin': -4,
    'vmax': 4,
    'highRes': False
}

set_up_kwargs_default = {
    # chose sample set from data
    # function: choose_samples()
    'select_samples_from': None,
    'select_samples_which': None,
    'select_samples_sort_by': 'TP53_mut5,FOXA1_mut5',
    'select_samples_title': 'select_all',

    # script set up params
    'saveReport': True,
    'txt_label': 'Classification',
    'toPrint': True,
    'reportName': 'DEBUG_'+script_fname,
    'gene_info_fname': 'genes_info.csv',
    'chr_col': 'chr_int',
    'gene_id_col': 'gene',
    'gene_order_dict_fname': None,
    'sample_info_fname': '20180704_emca.csv',
    'sample_info_table_index_colname': 'Oncoscan_ID',
    'plot_kwargs': plot_kwargs,
    'toRemoveDupl': True,
    'rename_genes': 'null,

    # set directories
    'input_directory': 'output,set_up_endometrial,remove_dupl_genes',
    'input_fname': 'data_processed__select_TP53mut__uniq.txt',
    'gene_info_directory': 'output,set_up_endometrial',
    'sample_info_directory': 'input',
    'selected_genes_directory': 'output,set_up_endometrial,nexus_express',
    'output_directory': None,
    'DEBUG': True
}


@plac.annotations(
    set_up_kwargs='keyword arguments'
)
def main(**set_up_kwargs):

    # update the default key/value pairs if the user gives different values
    # and take the union of all pairs
    set_up_kwargs_default.update(set_up_kwargs)

    if set_up_kwargs_default.get('DEBUG'):
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)

    classification(**set_up_kwargs_default)


if __name__ == '__main__':
    plac.call(main)
