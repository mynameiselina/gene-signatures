#!/usr/bin/env python3
"""
load data from different cohorts with the same features
(optional) load info table of samples for each dataset
(optional) special case:
    swap the values of a binary column in the info table
    if the user has requested it
    (useful for integrating labels between cohorts)

join the cohort samples from the multiple datasets
on the common features (inner join)

(optional) do the same for the info_tables
but keep all collumns (outer join)

(optional) create new label name
by merging existing labels according to user preferances
(needed when no common label name between cohorts)

sort the samples by name

Plots:
heatmap of combined data (on samples)
- without gene ordering
- with gene ordering if gene_order has been provided

save the combined data
(optional) save the sample_info
"""
from omics_processing.io import (
    set_directory
    )
from gene_signatures.core import (
    custom_div_cmap
)
from gene_signatures.combine_data import (
    combine_features
)
import os
import sys
import json
import plac
import logging
import matplotlib
import matplotlib.pyplot as plt

script_path = os.path.dirname(__file__)
script_fname = os.path.basename(__file__).rsplit('.')[0]
logger = logging.getLogger(__name__)


debug_config = os.path.join(
    script_path, '..', 'examples',
    'configs', 'DEBUG.json')
params = {
    'reportName': script_fname
}


@plac.annotations(
    json_config=plac.Annotation(
        'File path where the json config is stored.',
        'option', 'config', type=str
    ),
    set_up_kwargs='keyword arguments',
    DEBUG=plac.Annotation(
        'DEBUG mode',
        'option', 'D', type=bool
    ),
)
def main(json_config, DEBUG=True, **set_up_kwargs):

    if DEBUG:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        if json_config is None:
            json_config = debug_config

    if json_config is not None:
        try:
            logger.info('Reading params from config file:\n'+json_config)
            with open(json_config, 'r') as fp:
                set_up_kwargs_config = json.load(fp)

            # -- left_dict.update(right_dict):
            # -- update the left dict key/value pairs
            # -- if the right dict hasdifferent values
            # -- and take the union of all pairs

            #  update default params with config params
            params.update(set_up_kwargs_config)
            #  update params again with command line params
            params.update(set_up_kwargs)

        except:
            logger.error('Config path does not exist:\n'+json_config)
    else:
        logger.info('No config file found')
        #  update default params with command line params
        params.update(set_up_kwargs)

    combine_features(**params)


if __name__ == '__main__':
    plac.call(main)
