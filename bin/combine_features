#!/usr/bin/env python3
"""
load data from different datasets of the same cohort
if datasets have different sample IDs
map them to a user defined common ID
(using the samples info table as a proxy)
add suffix to separate common genes between datasets

join the data features from the multiple datasets
on the common samples (inner join)
sort the samples by name

Plots:
- heatmap of combined data (on features)

save the combined data
"""
from omics_processing.io import (
    set_directory
    )
from gene_signatures.core import (
    custom_div_cmap
)
from gene_signatures.combine_data import (
    combine_features
)
import os
import sys
import json
import plac
import logging
import matplotlib
import matplotlib.pyplot as plt

script_path = os.path.dirname(__file__)
script_fname = os.path.basename(__file__).rsplit('.')[0]
logger = logging.getLogger(__name__)


debug_config = os.path.join(
    script_path, '..', 'examples',
    'configs', 'DEBUG.json')
params = {
    'reportName': script_fname
}


@plac.annotations(
    json_config=plac.Annotation(
        'File path where the json config is stored.',
        'option', 'config', type=str
    ),
    set_up_kwargs='keyword arguments',
    DEBUG=plac.Annotation(
        'DEBUG mode',
        'option', 'D', type=bool
    ),
)
def main(json_config, DEBUG=True, **set_up_kwargs):

    if DEBUG:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        if json_config is None:
            json_config = debug_config

    if json_config is not None:
        try:
            logger.info('Reading params from config file:\n'+json_config)
            with open(json_config, 'r') as fp:
                set_up_kwargs_config = json.load(fp)

            # -- left_dict.update(right_dict):
            # -- update the left dict key/value pairs
            # -- if the right dict hasdifferent values
            # -- and take the union of all pairs

            #  update default params with config params
            params.update(set_up_kwargs_config)
            #  update params again with command line params
            params.update(set_up_kwargs)

        except:
            logger.error('Config path does not exist:\n'+json_config)
    else:
        logger.info('No config file found')
        #  update default params with command line params
        params.update(set_up_kwargs)

    combine_features(**params)


if __name__ == '__main__':
    plac.call(main)
