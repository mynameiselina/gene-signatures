#!/usr/bin/env python3
"""
load info table of samples
load files from each patient: samples in rows, genes in columns
get size of each sample and plot it
(i.e. abundance of genes with in each sample)

concat all samples in one table and keep union of all genes,
then fill NaNs with zero

CLEAN THE data FROM ALL SAMPLES
extract the start, end and chrom info from the table
and keep only the functions values
remove genes that exist in multiple chromosomes across samples

ORDER THE GENES FROM ALL SAMPLES
if the gene names are duplicated, through an exception

CREATE dictionary of gene names and their order
ORDER the table by gene position

PLOT Abundance of gene data per sample:
'oncoscan_events', 'oncoscan_events_filt',
'genes_with_CNV', 'genes_with_CNV_merged'

SAVE data and sample_info
"""

from gene_signatures.set_up_data import (
    set_up_data
)
from gene_signatures.core import (
    custom_div_cmap
)
from omics_processing.io import (
    set_directory
    )
import os
import sys
import plac
import json
import logging
import matplotlib
import matplotlib.pyplot as plt

script_path = os.path.dirname(__file__)
script_fname = os.path.basename(__file__).rsplit('.')[0]
logger = logging.getLogger(__name__)


debug_config = os.path.join(
    script_path, '..', 'examples',
    'configs', 'DEBUG.json')
params = {
    'reportName': script_fname
}


@plac.annotations(
    json_config=plac.Annotation(
        'File path where the json config is stored.',
        'option', 'config', type=str
    ),
    set_up_kwargs='keyword arguments',
    DEBUG=plac.Annotation(
        'DEBUG mode',
        'option', 'D', type=bool
    ),
)
def main(json_config, DEBUG=True, **set_up_kwargs):

    if DEBUG:
        logging.basicConfig(stream=sys.stdout, level=logging.DEBUG)
        if json_config is None:
            json_config = debug_config

    if json_config is not None:
        try:
            logger.info('Reading params from config file:\n'+json_config)
            with open(json_config, 'r') as fp:
                set_up_kwargs_config = json.load(fp)

            # -- left_dict.update(right_dict):
            # -- update the left dict key/value pairs
            # -- if the right dict hasdifferent values
            # -- and take the union of all pairs

            #  update default params with config params
            params.update(set_up_kwargs_config)
            #  update params again with command line params
            params.update(set_up_kwargs)

        except:
            logger.error('Config path does not exist:\n'+json_config)
    else:
        logger.info('No config file found')
        #  update default params with command line params
        params.update(set_up_kwargs)

    # call set_up_data
    set_up_data(**params)


if __name__ == '__main__':
    plac.call(main)
